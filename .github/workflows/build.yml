name: Build

on:
  push:
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:


jobs:
  basepackage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: sudo apt-get install jq
      - run: ./build.sh
      - uses: actions/setup-node@v2
        with:
          node-version: 12.22.0
      - run: npm pack
        working-directory: dist/node
      - uses: actions/upload-artifact@v2
        with:
          path: dist/node/*.tgz
          name: package
          if-no-files-found: error
      - name: Remove packed file
        run: rm -R dist/node/*.tgz
      - uses: actions/upload-artifact@v2
        with:
          path: dist/
          name: dist
          if-no-files-found: error
  build-node:
    needs: [basepackage]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-2019]
        node: [14.17.0, 16.11.1, 17.4.0]
        architecture: [x64, ia32]
        include:
          - architecture: ia32
            architecture_node: x86
            rust_target: i686-pc-windows-msvc
          - architecture: x64
            architecture_node: x64
        exclude:
          - os: macos-10.15
            architecture: ia32
          - os: ubuntu-18.04
            architecture: ia32
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist/
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture_node }}
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 'stable'
          target: ${{ matrix.rust_target }}
          profile: minimal
          override: true
      - run: npm config set msbuild_path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"
        if: ${{ runner.os == 'Windows' }}
      - run: yarn install
        working-directory: dist/node
      - name: Run tests
        run: yarn test --testTimeout 20000
        working-directory: dist/node
      - name: Fetch filename
        id: artifact_name
        shell: bash
        run: echo ::set-output name=name::`node ../../artifactname.js`
        working-directory: dist/node
      - name: Tar file
        run: tar -cvzf ${{ steps.artifact_name.outputs.name }}.tar.gz native/index.node
        working-directory: dist/node
      - uses: actions/upload-artifact@v2
        with:
          path: dist/node/${{ steps.artifact_name.outputs.name }}.tar.gz
          name: ${{ steps.artifact_name.outputs.name }}
  build-electron:
    needs: [basepackage]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-2019]
        architecture: [x64, ia32]
        electron: [16.0.1, 15.3.0, 15.2.0, 15.1.2, 15.0.0, 14.2.0, 14.1.0, 14.0.1, 13.6.0, 13.5.0, 13.4.0, 13.3.0, 13.2.3, 13.1.0, 13.0.0]
        include:
          - architecture: ia32
            architecture_node: x86
            rust_target: i686-pc-windows-msvc
          - architecture: x64
            architecture_node: x64
          - architecture: x64
            node: 14.17.0
          - electron: 16.0.1
            node: 16.9.1
          - electron: 15.3.0
            node: 16.5.0
          - electron: 15.2.0
            node: 16.5.0
          - electron: 15.1.2
            node: 16.5.0
          - electron: 15.0.0
            node: 16.5.0
          - electron: 14.2.0
            node: 14.17.0
          - electron: 14.1.0
            node: 14.17.0
          - electron: 14.0.1
            node: 14.17.0
          - electron: 13.6.0
            node: 14.17.0
          - electron: 13.5.0
            node: 14.17.0
          - electron: 13.4.0
            node: 14.17.0
          - electron: 13.3.0
            node: 14.17.0
          - electron: 13.2.3
            node: 14.17.0
          - electron: 13.1.0
            node: 14.17.0
          - electron: 13.0.0
            node: 14.17.0
        exclude:
          - os: macos-10.15
            architecture: ia32
          - os: ubuntu-18.04
            architecture: ia32
    runs-on: ${{ matrix.os }}
    env:
      npm_config_arch: ${{ matrix.architecture }}
      npm_config_target_arch: ${{ matrix.architecture }}
      npm_config_target: ${{ matrix.electron }}
      npm_config_disturl: https://atom.io/download/electron
      npm_config_runtime: electron
      ELECTRON_RUN_AS_NODE: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist/
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 'stable'
          target: ${{ matrix.rust_target }}
          profile: minimal
          override: true
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture_node }}
      - run: npm config set msbuild_path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"
        if: ${{ runner.os == 'Windows' }}
      - name: Install and build
        run: |
          yarn install
          yarn add electron@${{ matrix.electron }}
        working-directory: dist/node
      - name: Run tests
        working-directory: ./dist/node
        run: yarn run electron ./node_modules/jest/bin/jest.js --testTimeout 60000
        env:
          ELECTRON_RUN_AS_NODE: true
      - name: Fetch filename
        id: artifact_name
        shell: bash
        run: echo ::set-output name=name::`yarn run --silent electron ../../artifactname.js`
        working-directory: dist/node
      - name: Tar file
        run: tar -cvzf ${{ steps.artifact_name.outputs.name }}.tar.gz native/index.node
        working-directory: dist/node
      - uses: actions/upload-artifact@v2
        with:
          path: dist/node/${{ steps.artifact_name.outputs.name }}.tar.gz
          name: ${{ steps.artifact_name.outputs.name }}
  publish:
    needs: [build-electron]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
      - name: Fetch git tag
        id: current_tag
        run: |
          git fetch --prune --unshallow && echo ::set-output name=tag::`git describe --tags --abbrev=0 --exact-match`
      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@v1
        if: steps.current_tag.outputs.tag != ''
        with:
          input_string: ${{ steps.current_tag.outputs.tag }}
          version_extractor_regex: 'v(.*)$'
      - name: Make sure dist dir exists
        run: mkdir dist
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./dist/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: steps.semver_parser.outputs.fullversion
        # release might already exist - that's ok then
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'v${{ steps.semver_parser.outputs.fullversion }}'
          release_name: 'v${{ steps.semver_parser.outputs.fullversion }}'
          draft: false
          prerelease: steps.semver_parser.outputs.prerelease != []
      - uses: AButler/upload-release-assets@v2.0
        with:
          files: 'dist/*'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ steps.semver_parser.outputs.fullversion }}
      - run: npm install
      - run: npm publish dist/package/*.tgz --dry-run
        shell: bash
